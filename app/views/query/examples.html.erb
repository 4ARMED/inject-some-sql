<h2>Overview</h2>
<p>
The <a href="http://rubyonrails.org/">Ruby on Rails</a> web framework provides a library called <a href="http://guides.rubyonrails.org/active_record_querying.html">ActiveRecord</a> which provides an abstraction for accessing databases.
</p>
<p>
This page lists many query methods and options in ActiveRecord which do not sanitize raw SQL arguments, opening up code to <a href="https://owasp.org/index.php/SQL_Injection">SQL Injection</a> exploits.
</p>
<p>
This list is in no way exhaustive or complete! Please feel free to <a href="https://github.com/presidentbeef/inject-some-sql">contribute</a>.
<h3>Examples</h3>
<p>
Each method or option described below is accompanied by an example demonstrating how the ActiveRecord interface could be exploited. These are not necessarily the <em>worst</em> exploits, they represent just a small taste of what can be accomplished.
</p>
<p>
The examples on this page were tested with Rails 3.2.11 and SQLite 3.
</p>
<p>
ActiveRecord appears to reject all input after `;`, so either `;` or `--` can be used to ignore the rest of a query. This also means it is not simple to chain queries together when injecting SQL.
</p>
<h3>Interactive Version</h3>
<p>
Clone and run this site from <a href="https://github.com/presidentbeef/inject-some-sql">the git repo</a> to try out or modify the examples!
</p>
<table class="table">
  <% @queries.each do |q| %>
  <tr>
    <td>
      <%= render :partial => 'example', :locals => { :query => q } %>
    </td>
  </tr>
  <% end %>
</table>
